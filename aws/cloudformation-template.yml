AWSTemplateFormatVersion: '2010-09-09'
Description: 'Confluence RAG Chatbot Infrastructure'

Parameters:
  BucketName:
    Type: String
    Default: 'confluence-rag-documents-bucket'
    Description: 'S3 bucket name for storing documents'
  
  OpenSearchDomainName:
    Type: String
    Default: 'confluence-rag-search'
    Description: 'OpenSearch domain name'
    
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: [dev, staging, prod]
    Description: 'Environment name'

Resources:
  # S3 Bucket for document storage
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${BucketName}-${Environment}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'confluence-rag-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${DocumentsBucket}/*'
                  - !GetAtt DocumentsBucket.Arn
        - PolicyName: OpenSearchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - es:ESHttpPost
                  - es:ESHttpPut
                  - es:ESHttpGet
                  - es:ESHttpDelete
                Resource: !Sub '${OpenSearchDomain}/*'
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: '*'

  # OpenSearch Domain
  OpenSearchDomain:
    Type: AWS::OpenSearch::Domain
    Properties:
      DomainName: !Sub '${OpenSearchDomainName}-${Environment}'
      EngineVersion: 'OpenSearch_2.3'
      ClusterConfig:
        InstanceType: t3.small.search
        InstanceCount: 1
        DedicatedMasterEnabled: false
      EBSOptions:
        EBSEnabled: true
        VolumeType: gp3
        VolumeSize: 20
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
            Action: 'es:*'
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OpenSearchDomainName}-${Environment}/*'
      DomainEndpointOptions:
        EnforceHTTPS: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      EncryptionAtRestOptions:
        Enabled: true

  # Lambda function for document processing
  DocumentProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'confluence-rag-document-processor-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          S3_BUCKET: !Ref DocumentsBucket
          OPENSEARCH_ENDPOINT: !GetAtt OpenSearchDomain.DomainEndpoint
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            // Document processing logic will be implemented here
            console.log('Document processor triggered:', JSON.stringify(event));
            return { statusCode: 200, body: 'Document processed successfully' };
          };

  # Lambda function for chat processing
  ChatProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'confluence-rag-chat-processor-${Environment}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          OPENSEARCH_ENDPOINT: !GetAtt OpenSearchDomain.DomainEndpoint
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            // Chat processing logic will be implemented here
            console.log('Chat processor triggered:', JSON.stringify(event));
            return { statusCode: 200, body: 'Chat processed successfully' };
          };

  # S3 Bucket notification to trigger document processing
  BucketNotification:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${BucketName}-notifications-${Environment}'
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt DocumentProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: documents/

  # Permission for S3 to invoke Lambda
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DocumentProcessorFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub '${DocumentsBucket}/*'

  # API Gateway for external access (optional)
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'confluence-rag-api-${Environment}'
      Description: 'API for Confluence RAG Chatbot'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway resource and methods would be added here for external access

Outputs:
  S3BucketName:
    Description: 'S3 bucket name for documents'
    Value: !Ref DocumentsBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'

  OpenSearchEndpoint:
    Description: 'OpenSearch domain endpoint'
    Value: !GetAtt OpenSearchDomain.DomainEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-OpenSearchEndpoint'

  LambdaRoleArn:
    Description: 'Lambda execution role ARN'
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaRole'

  DocumentProcessorFunctionArn:
    Description: 'Document processor Lambda function ARN'
    Value: !GetAtt DocumentProcessorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DocumentProcessor'

  ChatProcessorFunctionArn:
    Description: 'Chat processor Lambda function ARN'
    Value: !GetAtt ChatProcessorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ChatProcessor'
